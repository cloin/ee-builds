name: Devel EE Build

on:
  pull_request:
    branches:
      - main
    types: [opened, reopened, synchronize]

jobs:
  prepare-matrix:
    runs-on: ubuntu-latest  
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      length: ${{ steps.set-matrix.outputs.length }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref != '' && github.event.pull_request.head.ref || 'main' }}

      - name: Generate matrix  
        id: generate-matrix
        run: |
          echo $GITHUB_BASE_REF
          echo $GITHUB_HEAD_REF
          python -u .github/workflows/generate_matrix.py \
          --start-ref origin/$GITHUB_BASE_REF \
          --end-ref $GITHUB_HEAD_REF \
          --output-path matrix_output.json

      - name: Read matrix
        id: set-matrix
        run: |
          MATRIX_JSON=$(cat matrix_output.json)
          echo "::set-output name=matrix::$MATRIX_JSON"
          MATRIX_LENGTH=$(echo $MATRIX_JSON | jq '.include | length')
          echo $MATRIX_LENGTH
          echo "::set-output name=length::$MATRIX_LENGTH"

  build-ee:
    needs: [prepare-matrix]
    runs-on: ubuntu-latest
    environment: test
    strategy:
      matrix: ${{fromJson(needs.prepare-matrix.outputs.matrix)}}
      fail-fast: false
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install python requirements (ansible-builder)
        run: pip install -r requirements.txt

      - name: Define environment variables
        run: |
          echo "EE=${{ matrix.ee }}" >> $GITHUB_ENV
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          echo "IMAGE_TAG=pr-${{ github.event.number }}-$SHORT_SHA" >> $GITHUB_ENV
          echo "IMAGE_REGISTRY=ghcr.io" >> $GITHUB_ENV

      - name: Process EE Versions and Build Images
        working-directory: ${{ matrix.ee }}
        run: |
          python -u ../.github/workflows/process_matrix.py --input-path .
          VERSION_MATRIX=$(cat ee_matrix_output.json)
          for ITEM in $(echo $VERSION_MATRIX | jq -c '.include[]'); do
            VERSION=$(echo $ITEM | jq -r '.version')
            BASE_IMAGE=$(echo $ITEM | jq -r '.base_image')
            TAG_SUFFIX="${VERSION}-${{ env.IMAGE_TAG }}"

            if [ "$VERSION" == "default" ]; then
              TAG_SUFFIX="${{ env.IMAGE_TAG }}"
              ansible-builder build -v 3 \
              --build-arg AH_TOKEN=${{ secrets.AH_TOKEN }} \
              --context=../${{ matrix.ee }} \
              --tag=${{ matrix.ee }}:$TAG_SUFFIX \
              --tag=${{ matrix.ee }}:${{ github.sha }}
            else
              ansible-builder build -v 3 \
              --build-arg EE_BASE_IMAGE=$BASE_IMAGE \
              --build-arg AH_TOKEN=${{ secrets.AH_TOKEN }} \
              --context=../${{ matrix.ee }} \
              --tag=${{ matrix.ee }}:$TAG_SUFFIX \
              --tag=${{ matrix.ee }}:${{ github.sha }}
            fi

            # Create artifact file for each version
            COMMANDS_FILE="commands-${{ matrix.ee }}-$VERSION.txt"
            echo "" >> $COMMANDS_FILE
            echo "${{ matrix.ee }} - $VERSION" >> $COMMANDS_FILE
            echo "" >> $COMMANDS_FILE
            echo "\`\`\`" > $COMMANDS_FILE
            echo "podman pull ${{ env.IMAGE_REGISTRY }}/${{ github.repository_owner }}/${{ matrix.ee }}:$TAG_SUFFIX" >> $COMMANDS_FILE
            echo "\`\`\`" >> $COMMANDS_FILE
            echo "<details>" >> $COMMANDS_FILE
            echo "<summary><b>More info...</b></summary>" >> $COMMANDS_FILE
            echo "" >> $COMMANDS_FILE
            echo "#### Installed collections" >> $COMMANDS_FILE
            echo "" >> $COMMANDS_FILE
            echo "\`\`\`" >> $COMMANDS_FILE
            podman run -it ${{ matrix.ee }}:$TAG_SUFFIX ansible-galaxy collection list >> $COMMANDS_FILE
            echo "\`\`\`" >> $COMMANDS_FILE
            echo "" >> $COMMANDS_FILE
            echo "#### Ansible version" >> $COMMANDS_FILE
            echo "" >> $COMMANDS_FILE
            echo "\`\`\`" >> $COMMANDS_FILE
            podman run -it ${{ matrix.ee }}:$TAG_SUFFIX ansible --version >> $COMMANDS_FILE
            echo "\`\`\`" >> $COMMANDS_FILE
            echo "</details>" >> $COMMANDS_FILE

      - name: Upload build artifact for ${{ matrix.ee }} - $VERSION
        uses: actions/upload-artifact@v2
        with:
          name: commands-${{ matrix.ee }}-$VERSION
          path: ${{ matrix.ee }}/commands-${{ matrix.ee }}-$VERSION.txt

      - name: Push To GHCR
        id: push_to_ghcr
        uses: redhat-actions/push-to-registry@v2
        with:
          image: ${{ env.EE }}
          tags: ${{ env.IMAGE_TAG }}
          registry: ${{ env.IMAGE_REGISTRY }}/${{ github.repository_owner }}

      - name: Set push success flag
        if: success()
        run: echo "push_success=true" >> $GITHUB_ENV

      - name: Print summary
        run: |
          echo "## :rocket: Usage" >> $GITHUB_STEP_SUMMARY
          echo "Image pushed to repository: ${{ env.IMAGE_REGISTRY }}/${{ github.repository_owner }}/${{ env.EE }}:${{ env.IMAGE_TAG }}" >> $GITHUB_STEP_SUMMARY
          echo "> \`podman pull ${{ env.IMAGE_REGISTRY }}/${{ github.repository_owner }}/${{ env.EE }}:${{ env.IMAGE_TAG }}\`" >> $GITHUB_STEP_SUMMARY

  post-comment:
    needs: build-ee
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download Artifacts
        uses: actions/download-artifact@v2

      - name: Post Comment
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            let commentBody = '### :rocket: **EE Images Built** :rocket:\n\n';

            const artifactsDirectory = './';  // Base directory where artifacts are downloaded
            fs.readdirSync(artifactsDirectory, { withFileTypes: true }).forEach(dirent => {
              if (dirent.isDirectory() && dirent.name.startsWith('commands-')) {
                const artifactDirPath = path.join(artifactsDirectory, dirent.name);
                fs.readdirSync(artifactDirPath).forEach(file => {
                  const filePath = path.join(artifactDirPath, file);
                  const content = fs.readFileSync(filePath, 'utf8');
                  commentBody += content + '\n';
                });
              }
            });

            const prNumber = context.issue.number;
            const repo = context.repo;
            github.rest.issues.createComment({
              ...repo,
              issue_number: prNumber,
              body: commentBody.trim()
            });
